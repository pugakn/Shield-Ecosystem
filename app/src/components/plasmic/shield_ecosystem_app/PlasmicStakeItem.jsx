// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 32A6R5tEk8Q2nVvJmPnVbf
// Component: nAEUjCFKSM
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { Button } from "antd"; // plasmic-import: kv6Mk_JNYw/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../generic_landing_page/plasmic_generic_landing_page.module.css"; // plasmic-import: 32A6R5tEk8Q2nVvJmPnVbf/projectcss
import sty from "./PlasmicStakeItem.module.css"; // plasmic-import: nAEUjCFKSM/css

export const PlasmicStakeItem__VariantProps = new Array("enabled");

export const PlasmicStakeItem__ArgProps = new Array();

function PlasmicStakeItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lyGnw)}>
        <div className={classNames(projectcss.all, sty.freeBox___3KqMa)}>
          <div className={classNames(projectcss.all, sty.freeBox___0WTwE)}>
            <div
              data-plasmic-name={"shieldText"}
              data-plasmic-override={overrides.shieldText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.shieldText
              )}
            >
              {"Staked: 5000 SHIELD"}
            </div>

            <div
              data-plasmic-name={"forgeText"}
              data-plasmic-override={overrides.forgeText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.forgeText
              )}
            >
              {"Awarded: 5000 FORGE"}
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__zCi6Z)}>
            <div
              data-plasmic-name={"dateText"}
              data-plasmic-override={overrides.dateText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.dateText
              )}
            >
              {"Until 01/01/2001"}
            </div>
          </div>
        </div>

        <Button
          data-plasmic-name={"unstakeButton"}
          data-plasmic-override={overrides.unstakeButton}
          className={classNames("__wab_instance", sty.unstakeButton, {
            [sty.unstakeButtonenabled]: hasVariant(
              variants,
              "enabled",
              "enabled"
            )
          })}
          disabled={hasVariant(variants, "enabled", "enabled") ? false : true}
          shape={"round"}
          size={"medium"}
          type={"primary"}
        >
          {"Unstake"}
        </Button>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "shieldText", "forgeText", "dateText", "unstakeButton"],
  shieldText: ["shieldText"],
  forgeText: ["forgeText"],
  dateText: ["dateText"],
  unstakeButton: ["unstakeButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStakeItem__ArgProps,
      internalVariantPropNames: PlasmicStakeItem__VariantProps
    });

    return PlasmicStakeItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStakeItem";
  } else {
    func.displayName = `PlasmicStakeItem.${nodeName}`;
  }
  return func;
}

export const PlasmicStakeItem = Object.assign(
  // Top-level PlasmicStakeItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    shieldText: makeNodeComponent("shieldText"),
    forgeText: makeNodeComponent("forgeText"),
    dateText: makeNodeComponent("dateText"),
    unstakeButton: makeNodeComponent("unstakeButton"),
    // Metadata about props expected for PlasmicStakeItem
    internalVariantProps: PlasmicStakeItem__VariantProps,
    internalArgProps: PlasmicStakeItem__ArgProps
  }
);

export default PlasmicStakeItem;
/* prettier-ignore-end */
