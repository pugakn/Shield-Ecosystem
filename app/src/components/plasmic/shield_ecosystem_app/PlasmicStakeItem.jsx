// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 32A6R5tEk8Q2nVvJmPnVbf
// Component: nAEUjCFKSM
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { Button } from "antd"; // plasmic-import: kv6Mk_JNYw/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../generic_landing_page/plasmic_generic_landing_page.module.css"; // plasmic-import: 32A6R5tEk8Q2nVvJmPnVbf/projectcss
import sty from "./PlasmicStakeItem.module.css"; // plasmic-import: nAEUjCFKSM/css

export const PlasmicStakeItem__VariantProps = new Array("enabled");

export const PlasmicStakeItem__ArgProps = new Array(
  "shieldText",
  "forgeText",
  "dateText"
);

function PlasmicStakeItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lyGnw)}>
        <div className={classNames(projectcss.all, sty.freeBox___3KqMa)}>
          <div className={classNames(projectcss.all, sty.freeBox___0WTwE)}>
            <div
              data-plasmic-name={"shieldTextContainer"}
              data-plasmic-override={overrides.shieldTextContainer}
              className={classNames(projectcss.all, sty.shieldTextContainer)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__taRhU)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Staked: 5000 SHIELD",
                  value: args.shieldText,
                  className: classNames(sty.slotTargetShieldText)
                })}
              </div>
            </div>

            <div
              data-plasmic-name={"forgeTextContainer"}
              data-plasmic-override={overrides.forgeTextContainer}
              className={classNames(projectcss.all, sty.forgeTextContainer)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__l9Oni)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Awarded: 5000 FORGE",
                  value: args.forgeText,
                  className: classNames(sty.slotTargetForgeText)
                })}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__zCi6Z)}>
            <div
              data-plasmic-name={"dateTextContainer"}
              data-plasmic-override={overrides.dateTextContainer}
              className={classNames(projectcss.all, sty.dateTextContainer)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hSgk)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Until 01/01/2001",
                  value: args.dateText,
                  className: classNames(sty.slotTargetDateText)
                })}
              </div>
            </div>
          </div>
        </div>

        <Button
          data-plasmic-name={"unstakeButton"}
          data-plasmic-override={overrides.unstakeButton}
          className={classNames("__wab_instance", sty.unstakeButton, {
            [sty.unstakeButtonenabled]: hasVariant(
              variants,
              "enabled",
              "enabled"
            )
          })}
          disabled={hasVariant(variants, "enabled", "enabled") ? false : true}
          shape={"round"}
          size={"medium"}
          type={"primary"}
        >
          {"Unstake"}
        </Button>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "shieldTextContainer",
    "forgeTextContainer",
    "dateTextContainer",
    "unstakeButton"
  ],

  shieldTextContainer: ["shieldTextContainer"],
  forgeTextContainer: ["forgeTextContainer"],
  dateTextContainer: ["dateTextContainer"],
  unstakeButton: ["unstakeButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStakeItem__ArgProps,
      internalVariantPropNames: PlasmicStakeItem__VariantProps
    });

    return PlasmicStakeItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStakeItem";
  } else {
    func.displayName = `PlasmicStakeItem.${nodeName}`;
  }
  return func;
}

export const PlasmicStakeItem = Object.assign(
  // Top-level PlasmicStakeItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    shieldTextContainer: makeNodeComponent("shieldTextContainer"),
    forgeTextContainer: makeNodeComponent("forgeTextContainer"),
    dateTextContainer: makeNodeComponent("dateTextContainer"),
    unstakeButton: makeNodeComponent("unstakeButton"),
    // Metadata about props expected for PlasmicStakeItem
    internalVariantProps: PlasmicStakeItem__VariantProps,
    internalArgProps: PlasmicStakeItem__ArgProps
  }
);

export default PlasmicStakeItem;
/* prettier-ignore-end */
