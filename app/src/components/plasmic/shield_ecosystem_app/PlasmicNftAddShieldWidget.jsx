// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 32A6R5tEk8Q2nVvJmPnVbf
// Component: K5e8nSjrQ4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: TCynlQ7-fD-aqs/component
import Button from "../../Button"; // plasmic-import: i6Jk8LEazvGVYD/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../generic_landing_page/plasmic_generic_landing_page.module.css"; // plasmic-import: 32A6R5tEk8Q2nVvJmPnVbf/projectcss
import sty from "./PlasmicNftAddShieldWidget.module.css"; // plasmic-import: K5e8nSjrQ4/css

export const PlasmicNftAddShieldWidget__VariantProps = new Array("approve");

export const PlasmicNftAddShieldWidget__ArgProps = new Array();

function PlasmicNftAddShieldWidget__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(variants, "approve", "approve") ? true : true) ? (
        <TextInput
          data-plasmic-name={"amountInput"}
          data-plasmic-override={overrides.amountInput}
          className={classNames("__wab_instance", sty.amountInput, {
            [sty.amountInputapprove]: hasVariant(variants, "approve", "approve")
          })}
          placeholder={"Amount"}
        />
      ) : null}
      {(hasVariant(variants, "approve", "approve") ? true : true) ? (
        <div
          data-plasmic-name={"descText"}
          data-plasmic-override={overrides.descText}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.descText,
            {
              [sty.descTextapprove]: hasVariant(variants, "approve", "approve")
            }
          )}
        >
          {"Enter some text"}
        </div>
      ) : null}

      <Button
        data-plasmic-name={"mintButton"}
        data-plasmic-override={overrides.mintButton}
        className={classNames("__wab_instance", sty.mintButton, {
          [sty.mintButtonapprove]: hasVariant(variants, "approve", "approve")
        })}
        color={"primary"}
        round={true}
      >
        {hasVariant(variants, "approve", "approve") ? "Approve" : "Mint"}
      </Button>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "amountInput", "descText", "mintButton"],
  amountInput: ["amountInput"],
  descText: ["descText"],
  mintButton: ["mintButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNftAddShieldWidget__ArgProps,
      internalVariantPropNames: PlasmicNftAddShieldWidget__VariantProps
    });

    return PlasmicNftAddShieldWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNftAddShieldWidget";
  } else {
    func.displayName = `PlasmicNftAddShieldWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicNftAddShieldWidget = Object.assign(
  // Top-level PlasmicNftAddShieldWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    amountInput: makeNodeComponent("amountInput"),
    descText: makeNodeComponent("descText"),
    mintButton: makeNodeComponent("mintButton"),
    // Metadata about props expected for PlasmicNftAddShieldWidget
    internalVariantProps: PlasmicNftAddShieldWidget__VariantProps,
    internalArgProps: PlasmicNftAddShieldWidget__ArgProps
  }
);

export default PlasmicNftAddShieldWidget;
/* prettier-ignore-end */
