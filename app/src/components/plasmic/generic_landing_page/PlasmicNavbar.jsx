// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 32A6R5tEk8Q2nVvJmPnVbf
// Component: 0gh3t-IoG53DF1
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: tm91OI3WBC-gJR/component
import Button from "../../Button"; // plasmic-import: i6Jk8LEazvGVYD/component
import { useScreenVariants as useScreenVariantsjeKVrGjKUcgD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JeKVrGjK-UcgD/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_generic_landing_page.module.css"; // plasmic-import: 32A6R5tEk8Q2nVvJmPnVbf/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: 0gh3t-IoG53DF1/css

export const PlasmicNavbar__VariantProps = new Array("authState");

export const PlasmicNavbar__ArgProps = new Array("shieldText", "forgeText");

function PlasmicNavbar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjeKVrGjKUcgD()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__pntrc)}
      >
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo)}
        />

        <div className={classNames(projectcss.all, sty.freeBox__r9W80)}>
          <div
            data-plasmic-name={"shieldTextContainer"}
            data-plasmic-override={overrides.shieldTextContainer}
            className={classNames(projectcss.all, sty.shieldTextContainer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__oZp9V)}>
              {p.renderPlasmicSlot({
                defaultContents: "SHIELD: 5000",
                value: args.shieldText,
                className: classNames(sty.slotTargetShieldText)
              })}
            </div>
          </div>

          <div
            data-plasmic-name={"forgeTextContainer"}
            data-plasmic-override={overrides.forgeTextContainer}
            className={classNames(projectcss.all, sty.forgeTextContainer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lsNz)}>
              {p.renderPlasmicSlot({
                defaultContents: "FORGE: 5000",
                value: args.forgeText,
                className: classNames(sty.slotTargetForgeText)
              })}
            </div>
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__os7Mj)}
        >
          <Button
            className={classNames("__wab_instance", sty.button___8XyGu)}
            color={"navLink"}
          >
            {"Marketplace"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__nuYni)}
            color={"navLink"}
          >
            {"How it works"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__ic0MU)}
            color={"navLink"}
          >
            {"Community"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__r5CAg, {
              [sty.buttonauthState_auth__r5CAgxGd2]: hasVariant(
                variants,
                "authState",
                "auth"
              ),

              [sty.buttonauthState_unauth__r5CAgEsYxN]: hasVariant(
                variants,
                "authState",
                "unauth"
              )
            })}
            color={"primary"}
            round={true}
          >
            {hasVariant(variants, "authState", "auth")
              ? "LOGOUT"
              : hasVariant(variants, "authState", "unauth")
              ? "SIGN IN"
              : "Sign up"}
          </Button>
        </p.Stack>

        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox__lG4Ov)}>
            <button
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button___62OZm
              )}
            >
              {"Sign up"}
            </button>

            <Button className={classNames("__wab_instance", sty.button__dtagD)}>
              {"Log in"}
            </Button>
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo", "shieldTextContainer", "forgeTextContainer"],
  logo: ["logo"],
  shieldTextContainer: ["shieldTextContainer"],
  forgeTextContainer: ["forgeTextContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    shieldTextContainer: makeNodeComponent("shieldTextContainer"),
    forgeTextContainer: makeNodeComponent("forgeTextContainer"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
