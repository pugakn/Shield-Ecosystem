// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 32A6R5tEk8Q2nVvJmPnVbf
// Component: agZnPQYLHu
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import StakeItem from "../../StakeItem"; // plasmic-import: nAEUjCFKSM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../generic_landing_page/plasmic_generic_landing_page.module.css"; // plasmic-import: 32A6R5tEk8Q2nVvJmPnVbf/projectcss
import sty from "./PlasmicStakeList.module.css"; // plasmic-import: agZnPQYLHu/css

export const PlasmicStakeList__VariantProps = new Array();

export const PlasmicStakeList__ArgProps = new Array();

function PlasmicStakeList__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <StakeItem
        className={classNames("__wab_instance", sty.stakeItem__eHgkC)}
      />

      <StakeItem
        className={classNames("__wab_instance", sty.stakeItem__cK2Jp)}
      />

      <StakeItem
        className={classNames("__wab_instance", sty.stakeItem___0NQmr)}
      />

      <StakeItem
        className={classNames("__wab_instance", sty.stakeItem__jViyw)}
      />

      <StakeItem
        className={classNames("__wab_instance", sty.stakeItem__yyHh7)}
      />

      <StakeItem
        className={classNames("__wab_instance", sty.stakeItem__v0EyC)}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStakeList__ArgProps,
      internalVariantPropNames: PlasmicStakeList__VariantProps
    });

    return PlasmicStakeList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStakeList";
  } else {
    func.displayName = `PlasmicStakeList.${nodeName}`;
  }
  return func;
}

export const PlasmicStakeList = Object.assign(
  // Top-level PlasmicStakeList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicStakeList
    internalVariantProps: PlasmicStakeList__VariantProps,
    internalArgProps: PlasmicStakeList__ArgProps
  }
);

export default PlasmicStakeList;
/* prettier-ignore-end */
