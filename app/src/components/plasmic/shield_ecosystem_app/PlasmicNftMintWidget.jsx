// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 32A6R5tEk8Q2nVvJmPnVbf
// Component: yv-K2ZiTgV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: TCynlQ7-fD-aqs/component
import Button from "../../Button"; // plasmic-import: i6Jk8LEazvGVYD/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../generic_landing_page/plasmic_generic_landing_page.module.css"; // plasmic-import: 32A6R5tEk8Q2nVvJmPnVbf/projectcss
import sty from "./PlasmicNftMintWidget.module.css"; // plasmic-import: yv-K2ZiTgV/css

export const PlasmicNftMintWidget__VariantProps = new Array();

export const PlasmicNftMintWidget__ArgProps = new Array();

function PlasmicNftMintWidget__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        loading={"lazy"}
      />

      <TextInput
        className={classNames("__wab_instance", sty.textInput__yUtK1)}
      />

      <TextInput
        className={classNames("__wab_instance", sty.textInput__yt2L)}
      />

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        color={"primary"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "button"],
  img: ["img"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNftMintWidget__ArgProps,
      internalVariantPropNames: PlasmicNftMintWidget__VariantProps
    });

    return PlasmicNftMintWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNftMintWidget";
  } else {
    func.displayName = `PlasmicNftMintWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicNftMintWidget = Object.assign(
  // Top-level PlasmicNftMintWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicNftMintWidget
    internalVariantProps: PlasmicNftMintWidget__VariantProps,
    internalArgProps: PlasmicNftMintWidget__ArgProps
  }
);

export default PlasmicNftMintWidget;
/* prettier-ignore-end */
